-- Define CTEs for aggregated data to improve readability and performance

-- CTE for Stock Aggregation
;WITH StockAgg AS (
    SELECT
        ITMREF_0,
        SUM(CASE WHEN STOFCY_0 = 'DC30' THEN QTYSTU_0 - CUMALLQTY_0 ELSE 0 END) AS DC30_Stock,
        SUM(CASE WHEN STOFCY_0 = 'DC33' THEN QTYSTU_0 - CUMALLQTY_0 ELSE 0 END) AS DC33_Stock,
        SUM(CASE WHEN STOFCY_0 = '1200' THEN QTYSTU_0 - CUMALLQTY_0 ELSE 0 END) AS [1200_Stock],
        SUM(CASE WHEN STOFCY_0 = '1600' THEN QTYSTU_0 - CUMALLQTY_0 ELSE 0 END) AS [1600_Stock],
        SUM(CASE WHEN STOFCY_0 = '1800' THEN QTYSTU_0 - CUMALLQTY_0 ELSE 0 END) AS [1800_Stock],
        SUM(CASE WHEN STOFCY_0 = '2100' THEN QTYSTU_0 - CUMALLQTY_0 ELSE 0 END) AS [2100_Stock],
        SUM(CASE WHEN STOFCY_0 = '2200' THEN QTYSTU_0 - CUMALLQTY_0 ELSE 0 END) AS [2200_Stock],
        SUM(CASE WHEN STOFCY_0 = '2300' THEN QTYSTU_0 - CUMALLQTY_0 ELSE 0 END) AS [2300_Stock],
        SUM(CASE WHEN STOFCY_0 = '2600' THEN QTYSTU_0 - CUMALLQTY_0 ELSE 0 END) AS [2600_Stock],
        SUM(CASE WHEN STOFCY_0 = '2800' THEN QTYSTU_0 - CUMALLQTY_0 ELSE 0 END) AS [2800_Stock]
    FROM LIVE.STOCK
    -- Optional: Add a WHERE clause here if you can pre-filter ITMREF_0 for better performance
    GROUP BY ITMREF_0
),

-- CTE for Sales Aggregation
SalesAgg AS (
    SELECT
        ITMREF_0,
        SUM(CASE WHEN CREDAT_0 >= DATEADD(MONTH, -1, GETDATE()) THEN AMTNOTLIN_0 ELSE 0 END) AS AllSales_1M,
        SUM(CASE WHEN CREDAT_0 >= DATEADD(MONTH, -3, GETDATE()) THEN AMTNOTLIN_0 ELSE 0 END) AS AllSales_3M,
        SUM(CASE WHEN CREDAT_0 >= DATEADD(MONTH, -12, GETDATE()) THEN AMTNOTLIN_0 ELSE 0 END) AS AllSales_12M,
        SUM(CASE WHEN STOFCY_0 = 'DC30' AND CREDAT_0 >= DATEADD(MONTH, -1, GETDATE()) THEN AMTNOTLIN_0 ELSE 0 END) AS DC30Sales_1M,
        SUM(CASE WHEN STOFCY_0 = 'DC30' AND CREDAT_0 >= DATEADD(MONTH, -3, GETDATE()) THEN AMTNOTLIN_0 ELSE 0 END) AS DC30Sales_3M,
        SUM(CASE WHEN STOFCY_0 = 'DC30' AND CREDAT_0 >= DATEADD(MONTH, -12, GETDATE()) THEN AMTNOTLIN_0 ELSE 0 END) AS DC30Sales_12M,
        SUM(CASE WHEN STOFCY_0 <> 'DC30' AND CREDAT_0 >= DATEADD(MONTH, -1, GETDATE()) THEN AMTNOTLIN_0 ELSE 0 END) AS RetailSales_1M,
        SUM(CASE WHEN STOFCY_0 <> 'DC30' AND CREDAT_0 >= DATEADD(MONTH, -3, GETDATE()) THEN AMTNOTLIN_0 ELSE 0 END) AS RetailSales_3M,
        SUM(CASE WHEN STOFCY_0 <> 'DC30' AND CREDAT_0 >= DATEADD(MONTH, -12, GETDATE()) THEN AMTNOTLIN_0 ELSE 0 END) AS RetailSales_12M
    FROM LIVE.SINVOICED
    WHERE CREDAT_0 >= DATEADD(MONTH, -12, GETDATE()) -- Pre-filter for efficiency
    -- Optional: Add further WHERE clauses if you can pre-filter ITMREF_0
    GROUP BY ITMREF_0
)

-- Main Query
SELECT
    CONVERT(VARCHAR, SOQ.CREDAT_0, 101) AS [DATE CREATED],
    SOQ.SOHNUM_0 AS [ORDER],
    CASE WHEN SOH.BETFCY_0 = 1 THEN 'SALES' ELSE 'INTERSITE' END AS [TYPE],
    SOH.HLDCOD_0 AS [ORDER HOLD],
    SOH.STOFCY_0 AS [STOCK SITE],
    SOH.BPCORD_0 + ' - ' + SOH.BPCNAM_0 AS [CUSTOMER],
    SOQ.ITMREF_0 AS [PRODUCT],
    -- Combine descriptions safely handling potential NULLs
    LTRIM(RTRIM(ISNULL(ITM.ITMDES1_0,'') + ' ' + ISNULL(ITM.ITMDES2_0,'') + ' ' + ISNULL(ITM.ITMDES3_0,''))) AS [DESCRIPTION],
    ITM.TSICOD_0 AS [STATUS],
    CASE ITF.ABCCLS_0 WHEN 1 THEN 'A' WHEN 2 THEN 'B' WHEN 3 THEN 'C' WHEN 4 THEN 'D' ELSE 'UNRANKED' END AS [ABC CLASS],
    ISNULL(ITM2.ITMREF_0, 'N/A') AS [ALTERNATIVE],
    -- Alternative description - NOTE: Original used ITM2.DES1 + ITM.DES2 + ITM.DES3. Verify if this is correct or should be ITM2.DES2/3
    ISNULL(LTRIM(RTRIM(ISNULL(ITM2.ITMDES1_0,'') + ' ' + ISNULL(ITM.ITMDES2_0,'') + ' ' + ISNULL(ITM.ITMDES3_0,''))), 'N/A') AS [ALT DESCRIPTION],
    CAST(SOQ.QTY_0 AS INT) AS [ORDERED],
    CAST(SOQ.QTY_0 - (SOQ.DLVQTY_0 + SOQ.OPRQTY_0) AS INT) AS [REMAINING],

    -- Stock Levels from CTE (using ISNULL to handle items not in StockAgg)
    CAST(ISNULL(SA.DC30_Stock, 0) AS INT) AS [DC30],
    CAST(ISNULL(SA.DC33_Stock, 0) AS INT) AS [DC33],
    CAST(ISNULL(SA.[1200_Stock], 0) AS INT) AS [1200],
    CAST(ISNULL(SA.[1600_Stock], 0) AS INT) AS [1600],
    CAST(ISNULL(SA.[1800_Stock], 0) AS INT) AS [1800],
    CAST(ISNULL(SA.[2100_Stock], 0) AS INT) AS [2100],
    CAST(ISNULL(SA.[2200_Stock], 0) AS INT) AS [2200],
    CAST(ISNULL(SA.[2300_Stock], 0) AS INT) AS [2300],
    CAST(ISNULL(SA.[2600_Stock], 0) AS INT) AS [2600],
    CAST(ISNULL(SA.[2800_Stock], 0) AS INT) AS [2800],

    -- Earliest PO details using OUTER APPLY (replaces 3 correlated subqueries)
    ISNULL(EarliestPO.POHNUM_0, 'N/A') AS [EARLIEST PO],
    ISNULL(CONVERT(VARCHAR, EarliestPO.EXTRCPDAT_0, 101), 'N/A') AS [ETA],
    ISNULL(EarliestPO.BPSNUM_0, 'N/A') AS [PO VENDOR],

    -- Priority Vendor using OUTER APPLY (replaces 1 correlated subquery)
    -- NOTE: TOP 1 without ORDER BY can be non-deterministic if multiple vendors exist for the item.
    ISNULL(PriorityVendor.BPSNUM_0, 'N/A') AS [PRIO. VENDOR],

    -- Sales figures from CTE (using ISNULL and formatting)
    CAST(CAST(ISNULL(SIA.AllSales_1M, 0) AS DECIMAL(18, 2)) AS VARCHAR) AS [ALL SALES -1 M],
    CAST(CAST(ISNULL(SIA.AllSales_3M, 0) AS DECIMAL(18, 2)) AS VARCHAR) AS [ALL SALES -3 M],
    CAST(CAST(ISNULL(SIA.AllSales_12M, 0) AS DECIMAL(18, 2)) AS VARCHAR) AS [ALL SALES -12 M],
    CAST(CAST(ISNULL(SIA.DC30Sales_1M, 0) AS DECIMAL(18, 2)) AS VARCHAR) AS [DC30 SALES -1 M],
    CAST(CAST(ISNULL(SIA.DC30Sales_3M, 0) AS DECIMAL(18, 2)) AS VARCHAR) AS [DC30 SALES -3 M],
    CAST(CAST(ISNULL(SIA.DC30Sales_12M, 0) AS DECIMAL(18, 2)) AS VARCHAR) AS [DC30 SALES -12 M],
    CAST(CAST(ISNULL(SIA.RetailSales_1M, 0) AS DECIMAL(18, 2)) AS VARCHAR) AS [RETAIL SALES -1 M],
    CAST(CAST(ISNULL(SIA.RetailSales_3M, 0) AS DECIMAL(18, 2)) AS VARCHAR) AS [RETAIL SALES -3 M],
    CAST(CAST(ISNULL(SIA.RetailSales_12M, 0) AS DECIMAL(18, 2)) AS VARCHAR) AS [RETAIL SALES -12 M]

FROM
    LIVE.SORDERQ SOQ
    LEFT OUTER JOIN LIVE.SORDER SOH ON SOQ.SOHNUM_0 = SOH.SOHNUM_0
    LEFT OUTER JOIN LIVE.ITMMASTER ITM ON SOQ.ITMREF_0 = ITM.ITMREF_0
    LEFT OUTER JOIN LIVE.ITMMASTER ITM2 ON ITM.RPLITM_0 = ITM2.ITMREF_0
    LEFT OUTER JOIN LIVE.ITMFACILIT ITF ON SOQ.STOFCY_0 = ITF.STOFCY_0 AND SOQ.ITMREF_0 = ITF.ITMREF_0
    LEFT OUTER JOIN StockAgg SA ON SOQ.ITMREF_0 = SA.ITMREF_0  -- Join the Stock CTE
    LEFT OUTER JOIN SalesAgg SIA ON SOQ.ITMREF_0 = SIA.ITMREF_0 -- Join the Sales CTE

    -- Use OUTER APPLY to get the single earliest PO row efficiently
    OUTER APPLY (
        SELECT TOP 1
            POHNUM_0,
            EXTRCPDAT_0,
            BPSNUM_0
        FROM LIVE.PORDERQ poq
        WHERE poq.ITMREF_0 = SOQ.ITMREF_0
          AND poq.POHNUM_0 LIKE 'PO3%'
          AND poq.BPSNUM_0 LIKE 'V%'
          AND poq.LINCLEFLG_0 = 1
        ORDER BY poq.EXTRCPDAT_0 ASC
    ) AS EarliestPO

    -- Use OUTER APPLY to get the priority vendor
    OUTER APPLY (
        SELECT TOP 1
            ITP.BPSNUM_0
        FROM LIVE.ITMBPS ITP
        WHERE ITP.ITMREF_0 = SOQ.ITMREF_0
        -- If there's a specific column determining priority (e.g., a flag or sequence), add ORDER BY here.
    ) AS PriorityVendor

WHERE
    SOQ.SOQSTA_0 <> 3
    AND SOQ.ALLQTY_0 = 0
    AND SOQ.ITMREF_0 NOT LIKE '/%'
    AND (SOQ.QTY_0 - (SOQ.DLVQTY_0 + SOQ.OPRQTY_0)) > 0
    -- The original GROUP BY is likely not needed anymore as we are joining pre-aggregated data.
    -- If duplicates arise, check the grain of your base tables (SORDERQ, SORDER etc.)

ORDER BY
    [DATE CREATED], -- Use alias or original column
    [ORDER] ASC;   -- Use alias or original column