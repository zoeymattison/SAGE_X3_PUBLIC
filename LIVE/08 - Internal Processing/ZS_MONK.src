Funprog ZFUNC_SOHLINES(ZNUM)
Value Char ZNUM
Local Clbfile RETVAL (6)
RETVAL=''
    If !clalev([F:ZSOP]) : Local File SORDERP[ZSOP] : Endif
    If !clalev([F:ZSOQ]) : Local File SORDERQ[ZSOQ] : Endif
    Link [ZSOP] With [ZSOQ]SOQ0=[F:ZSOP]SOHNUM;[F:ZSOP]SOPLIN;[F:ZSOP]SOPSEQ As [ZSO]
    Filter [ZSO] Where SOHNUM = ZNUM
    Read [ZSO] First
    If fstat = 0
        For [ZSO]
                RETVAL += num$([F:ZSO]SOPLIN/1000)+'. '-[F:ZSO]ITMREF-mess(1,16807,1)-[F:ZSO]ITMDES-mess(1,16807,1)-num$([F:ZSOQ]QTY)-[F:ZSO]SAU-mess(1,16807,1)-chr$(36)+format$("N3vF<:13.2",[F:ZSO]
& GROPRI*[F:ZSOQ]QTY)+chr$(13)+chr$(13)+chr$(13)+chr$(13)+chr$(10)+chr$(10)
        Next
    Endif
RETVAL+=''
End RETVAL

Funprog ZFUNC_POHLINES(ZNUM)
Value Char ZNUM
Local Clbfile RETVAL (6)
RETVAL=''
    If !clalev([F:ZZPOP]) : Local File PORDERP[ZZPOP] : Endif
    If !clalev([F:ZZPOQ]) : Local File PORDERQ[ZZPOQ] : Endif
    Link [ZZPOP] With [ZZPOQ]POQ0=[F:ZZPOP]POHNUM;[F:ZZPOP]POPLIN;[F:ZZPOP]POPSEQ As [ZPO]
    Filter [ZPO] Where POHNUM = ZNUM
    Read [ZPO] First
    If fstat = 0
        For [ZPO]
            RETVAL += num$([F:ZPO]POPLIN/1000)+'. '-[F:ZPO]ITMREF-mess(1,16807,1)-[F:ZZPOQ]ITMREFBPS-mess(1,16807,1)-[F:ZPO]ITMDES-mess(1,16807,1)-num$([F:ZZPOQ]QTYSTU)-[F:ZZPOQ]STU-mess(1,16807,1)-
& chr$(36)+format$("N3vF<:13.2",[F:ZPO]GROPRI)-mess(1,16807,1)-chr$(36)+format$("N3vF<:13.2",[F:ZPO]GROPRI*[F:ZZPOQ]QTYSTU)+chr$(13)+chr$(13)+chr$(13)+chr$(13)+chr$(10)+chr$(10)
        Next
    Endif
RETVAL+=''
End RETVAL

Funprog ZFUNC_SPRLIG(ZNUM)
Value Char ZNUM
Local Clbfile RETVAL (6)
RETVAL=''
    If !clalev([F:ZPOP]) : Local File PORDERP[ZPOP] : Endif
    If !clalev([F:ZPOQ]) : Local File PORDERQ[ZPOQ] : Endif
    Link [ZPOP] With [ZPOQ]POQ0=[F:ZPOP]POHNUM;[F:ZPOP]POPLIN;[F:ZPOP]POPSEQ As [ZPO]
    Filter [ZPO] Where POHNUM = ZNUM
    Read [ZPO] First
    If fstat = 0
        For [ZPO]
            If pat([F:ZPO]ITMREF, 'BAS*')<>0
                RETVAL += num$([F:ZPO]POPLIN/1000)+'. '-[F:ZPO]ITMREF-mess(1,16807,1)-[F:ZPOQ]ITMREFBPS-mess(1,16807,1)-[F:ZPO]ITMDES-mess(1,16807,1)-num$([F:ZPOQ]QTYSTU)-[F:ZPOQ]STU-mess(1,16807,1)-
& chr$(36)+format$("N3vF<:13.2",[F:ZPO]GROPRI*[F:ZPOQ]QTYSTU*1.12)+chr$(13)+chr$(13)+chr$(13)+chr$(13)+chr$(10)+chr$(10)
            Endif
        Next
    Endif
RETVAL+=''
End RETVAL

ZSUB_POHCLEUPD
[M:ZPOH]ZPOCLD = date$
[M:ZPOH]ZPOCLU = func AFNC.NOMUSER(GUSER)
Affzo [M:ZPOH]ZPOCLD
Affzo [M:ZPOH]ZPOCLU
End

ZSUB_POHPRNUPD
Local File PORDER[ZPO]
Update [ZPO] Where POHNUM = [V]ZG_POHNUM With ZPOSND = date$
Update [ZPO] Where POHNUM = [V]ZG_POHNUM With ZPOSNU = func AFNC.NOMUSER(GUSER)
Raz [V]ZG_POHNUM
LogicClose File [ZPO]
End

Funprog ZFUNC_MOSLIG(ZNUM)
Value Char ZNUM
Local Clbfile RETVAL (6)
RETVAL=''
    If !clalev([F:ZSOP]) : Local File SORDERP[ZSOP] : Endif
    If !clalev([F:ZSOQ]) : Local File SORDERQ[ZSOQ] : Endif
    Link [ZSOP] With [ZSOQ]SOQ0=[F:ZSOP]SOHNUM;[F:ZSOP]SOPLIN;[F:ZSOP]SOPSEQ As [ZSO]
    Filter [ZSO] Where SOHNUM = ZNUM
    Read [ZSO] First
    If fstat = 0
        For [ZSO]
            If pat([F:ZSO]ITMREF, 'MOS*')<>0
                RETVAL += num$([F:ZSO]SOPLIN/1000)+'. '-[F:ZSO]ITMREF-mess(1,16807,1)-[F:ZSO]ITMDES-mess(1,16807,1)-num$([F:ZSOQ]QTY)-[F:ZSO]SAU-mess(1,16807,1)-chr$(36)+format$("N3vF<:13.2",[F:ZSO]
& GROPRI*1.12*[F:ZSOQ]QTY)+chr$(13)+chr$(13)+chr$(13)+chr$(13)+chr$(10)+chr$(10)
            Endif
        Next
    Endif
RETVAL+=''
End RETVAL

Funprog ZFUNC_BPSWEB(ZBPSNUM)
Value Char ZBPSNUM
Local Char RETVAL(200)

If ZBPSNUM <> '' RETVAL=func AFNC.INTFLD('BPADDRESS','WEB(0)','1~'+ZBPSNUM+'~REMIT')
Endif

End RETVAL

Subprog ZSUB_PINAPPROVAL
If GFONCTION = "GESPIH" : Goto PIHINV : Else If GFONCTION = "GESBIS" : Goto BISINV : Endif : Endif
End

$PIHINV
Global Char ZG_PINREC(200) : [V]ZG_PINREC = func AFNC.INTFLD("BPSUPPLIER","ZBPSAPP",[M:PIH0]BPR)
Global Char ZG_PINVCR(100) : [V]ZG_PINVCR = [M:PIH0]NUM
Global Char ZG_BPSVCR(100) : [V]ZG_BPSVCR = [M:PIH1]BPRVCR
Global Char ZG_PINBPS(100) : [V]ZG_PINBPS = [M:PIH0]BPR
Global Decimal ZG_PINATI : [V]ZG_PINATI = [M:PIH4]AMTATI
Global Char ZG_PINCM1(100) : [V]ZG_PINCM1 = [M:PIH1]DES(0)
Global Char ZG_PINCM2(100) : [V]ZG_PINCM2 = [M:PIH1]DES(1)
Global Char ZG_PINCM3(100) : [V]ZG_PINCM3 = [M:PIH1]DES(2)
Global Char ZG_PINUSR(100) : [V]ZG_PINUSR = GUSER
Global Char ZG_PINFUN(100) : [V]ZG_PINFUN = GFONCTION
Goto PINAPPROVAL_WRK
End

$BISINV
Global Char ZG_PINREC(200) : [V]ZG_PINREC = func AFNC.INTFLD("BPSUPPLIER","ZBPSAPP",[M:BIS0]BPR)
Global Char ZG_PINVCR(100) : [V]ZG_PINVCR = [M:BIS0]NUM
Global Char ZG_BPSVCR(100) : [V]ZG_BPSVCR = [M:BIS1]BPRVCR
Global Char ZG_PINBPS(100) : [V]ZG_PINBPS = [M:BIS0]BPR
Global Decimal ZG_PINATI : [V]ZG_PINATI = [M:BIS1]AMTATI
Global Char ZG_PINCM1(100) : [V]ZG_PINCM1 = [M:BIS1]DES(0)
Global Char ZG_PINCM2(100) : [V]ZG_PINCM2 = [M:BIS1]DES(1)
Global Char ZG_PINCM3(100) : [V]ZG_PINCM3 = [M:BIS1]DES(2)
Global Char ZG_PINUSR(100) : [V]ZG_PINUSR = GUSER
Global Char ZG_PINFUN(100) : [V]ZG_PINFUN = GFONCTION
Goto PINAPPROVAL_WRK
End

$PINAPPROVAL_WRK
Global Char ZG_PINATT(250)
Local File AOBJTXT[ZAT]
Columns [ZAT] (IDENT1, NAM)
Filter [ZAT] Where IDENT1 = ZG_PINVCR
Read [ZAT]First
[V]ZG_PINATT = [F:ZAT]NAM
Local Integer TYPEVT : TYPEVT = 1
Local Char CODEVT : [L]CODEVT = "ZPA"
Local Char OPERAT : [L]OPERAT = ""
Local Char CLEOBJ : [L]CLEOBJ = ""
Call WORKFLOW([L]TYPEVT,[L]CODEVT,[L]OPERAT,[L]CLEOBJ) From AWRK
Raz [V]ZG_PINREC, [V]ZG_PINVCR, [V]ZG_BPSVCR, [V]ZG_PINBPS, [V]ZG_PINATI, [V]ZG_PINCM1, [V]ZG_PINCM2, [V]ZG_PINCM3, [V]ZG_PINUSR, [V]ZG_PINFUN, [V]ZG_PINATT
Columns [ZAT]
Filter [ZAT]
LogicClose File [ZAT]
End

Subprog ZSUB_APPRUPD
Local Char ZL_NUM
If GFONCTION = "GESBIS"
  [L]ZL_NUM = [M:BIS0]NUM
Endif
If GFONCTION = "GESPIH"
  [L]ZL_NUM = [M:PIH0]NUM
Endif
If [L]ZL_NUM = "" : Call ECR_TRACE("Button cannot be used in this context.",1) From GESECRAN : End : Endif
Local File PINVOICE[ZPI]
Local File GACCDUDATE[ZDU]
Local Integer ZL_I
Columns [ZPI] (NUM, PAZ, GTE)
Columns [ZDU] (NUM, FLGPAZ, TYP)
Read [ZPI]PIH0 = [L]ZL_NUM
If ![S]fstat
  If [F:ZPI]PAZ = 4 : Infbox "Document is already approved for payment!" : Columns [ZPI] : Columns [ZDU] : LogicClose File [ZPI], [ZDU] : End : Endif
  Update [ZPI] Where NUM = [L]ZL_NUM With PAZ = 4
  If ![S]fstat
    [L]ZL_I += 1
  Else
    Call ECR_TRACE("Error. The update failed. [PINVOICE]",1) From GESECRAN
  Endif
  Update [ZDU] Where NUM = [L]ZL_NUM and TYP = [F:ZPI]GTE With FLGPAZ = 4
  If ![S]fstat
    [L]ZL_I += 1
  Else
    Call ECR_TRACE("Error. The update failed. [GACCDUDATE]",1) From GESECRAN
  Endif
  If [L]ZL_I = 2
    Infbox "Record updated successfully. Please refresh the screen."
  Else
    Call ECR_TRACE("Error. Something went wrong. Please contact service and cite the document number.",1) From GESECRAN
  Endif
Else
  Call ECR_TRACE("Error. Problem reading the record.",1) From GESECRAN
Endif
Columns [ZPI]
Columns [ZDU]
LogicClose File [ZPI], [ZDU]
Raz [L]ZL_I
End

Funprog ZFUNC_SCP(ZSOHNUM)
Value Char ZSOHNUM
Local Char ZFILTER(10)(1..)
Local Char RETVAL(6)
    [L]ZFILTER(1) = "37"
    [L]ZFILTER(2) = "88"
    [L]ZFILTER(3) = "2221"
    [L]ZFILTER(4) = "54"
    [L]ZFILTER(4) = "42"
    [L]ZFILTER(5) = "85"
    [L]ZFILTER(6) = "49"
    [L]ZFILTER(7) = "19"
    [L]ZFILTER(8) = "20"
    [L]ZFILTER(9) = "21"
    [L]ZFILTER(10) = "22"

Local File SORDER[ZSO]
Columns [ZSO] (SOHNUM, DRN, REP(0))
Read [ZSO]SOH0 = [L]ZSOHNUM
If !fstat
  If find(num$([F:ZSO]DRN), [L]ZFILTER) or find([F:ZSO]REP(0), [L]ZFILTER)
    RETVAL = "1"
    End RETVAL
  Endif
RETVAL = "0"
End RETVAL
Else
  RETVAL = "1"
  End RETVAL
Endif
Raz [L]ZSOHNUM, [L]ZFILTER
Columns [ZSO]
LogicClose File [ZSO]

Funprog GETCOUNT(ZITM)
Value Char ZITM
Local Char RETVAL(200)
Local Integer COUNT
Local Char ZFISCALSTART : ZFISCALSTART = '0701'
Local Char ZFISCALYEAR

If !clalev([ZIV]) : Local File ITMMVT[ZIV] : Endif

# Get today's date and determine the first year of the current fiscal
Case month$(date$)
    When "January"    : ZFISCALYEAR = num$(year(date$)-1)
    When "February"   : ZFISCALYEAR = num$(year(date$)-1)
    When "March"      : ZFISCALYEAR = num$(year(date$)-1)
    When "April"      : ZFISCALYEAR = num$(year(date$)-1)
    When "May"        : ZFISCALYEAR = num$(year(date$)-1)
    When "June"       : ZFISCALYEAR = num$(year(date$)-1)
    When "July"       : ZFISCALYEAR = num$(year(date$))
    When "August"     : ZFISCALYEAR = num$(year(date$))
    When "September"  : ZFISCALYEAR = num$(year(date$))
    When "October"    : ZFISCALYEAR = num$(year(date$))
    When "November"   : ZFISCALYEAR = num$(year(date$))
    When "December"   : ZFISCALYEAR = num$(year(date$))
    When Default
Endcase

# Create the fiscal start string by appending the above result to 0701
Append ZFISCALYEAR, ZFISCALSTART

# Calculate how many times the product has been counted since the ZFISCALEAR date, and return the value to the filter
Filter [ZIV] Where ITMREF = ZITM and STOFCY = 'DC30'
    Read [ZIV] First
        If [ZIV]CUNDAT(0) >= ZFISCALYEAR : COUNT += 1 : Endif
        If [ZIV]CUNDAT(1) >= ZFISCALYEAR : COUNT += 1 : Endif
        If [ZIV]CUNDAT(2) >= ZFISCALYEAR : COUNT += 1 : Endif
        If [ZIV]CUNDAT(3) >= ZFISCALYEAR : COUNT += 1 : Endif
        RETVAL = num$(COUNT)
        End RETVAL
Raz ZITM, COUNT
