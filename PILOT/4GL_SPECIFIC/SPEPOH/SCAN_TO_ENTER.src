Sage X3 Scannable product entry for PO intersite creation

Purpose: To allow retail stores to scan a UPC, enter a quantity and have that translated into the screen grid, without the user ever having to interact with it or use the mouse.

Requirements
1.	A field to scan a UPC into and have it automatically changed to the linked product code
2.	A field for the user to enter the desired quantity
a.	Pressing enter or tab after typing in the quantity will add the product and quantity to the screen grid as a new line
b.	Entering a product and quantity that already exists in the lines should add to the existing line instead of creating a new line
3.	Control for the maximum allowable quantity
4.	Chronological process control – the user should not be able to exit the quantity field without confirming cancellation of the entire action
5.	Ability to engage modification of an existing PO when interacting with the new product entry field\
6.	Limit usage to a specific entry transaction for POs
7.	Limit usage to intersite entry only
8.	Perform a hard check on whether the product entered exists in the receiving site – throw an error if not

Implementation
New fields created
1.	POH0 -> ZSCNLN -> Type ITM (allows for product browser to be used if UPC does not scan or no UPC is present)
2.	POH0 -> ZSCNQY > Type QTY (integer, no decimal allowed)
New field actions created
1.	POH0 -> BPSNUM -> AM_BPSNUM (after modification, we want to check if the site is an intersite, and activate the new product field)
2.	POH0 -> ZSCNLN -> AM_ZSCNLN (after modification, we will perform several functions related to the processing of this field)
3.	POH0 -> ZSCNQY -> AP_ZSCNQY (after exit of the field, we will perform several functions related to the processing of this field)
4.	POH0 -> ZSCNQY -> C_ZSCNQY (control of the field to catch quantity of 0 and prevent quantity greater than 1000)
New buttons created
1.	OPOH -> Button Menu Z -> “Custom Functions”
2.	OPOH -> Button Menu Line Za -> “Enable scan to enter” (when opening an existing PO, if the PO is an intersite, the user can click this button to activate modification mode, and enable the new product field)
New entry transactions created
1.	Purchasing -> Orders -> RET Retail Intersite Entry (A highly limited entry transaction that hides all fields except those necessary for intersite creation)
a.	This has been combined with an authored view to further limit the layout of the screen

Development
All development was written in SPEPOH. I have simplified the code and removed all other modifications for the sake of this email.

$ACTION
Case ACTION
    When "AFFMASK" : Gosub AFFMASK
    When "ABANDON" : Gosub ABANDON
    When "STYLE" : Gosub STYLE
    When "SETBOUT" : Gosub SETBOUT
    When Default
Endcase
Return

# Disable the new fields when opening the window

$AFFMASK
Diszo [M:POH0]ZSCNLN
Diszo [M:POH0]ZSCNQY
Return

# Disable the new fields when cancelling creation of a new PO

$ABANDON
Diszo [M:POH0]ZSCNLN
Diszo [M:POH0]ZSCNQY
Return

# Specific button processing in the SETBOUT action when in entry transaction RET. If the user is not using the RET entry transaction,
# the button to enable the scan-to-enter function will be greyed out.
# 1. Grey-out the PO number and order date fields
# 2. Case the supplier code. If it returns intersite = 2, proceed to enable to scan-to-enter button in tag $SCAN_TO_ENTER
# 3. Processing for the scan-to-enter button Za, enabling modification mode (REP=”M”) and enabling usage of the ZSCNLN field
# 4. Prevent clicking of the button Za if we're already in a modification mode

$SETBOUT
If GFLAG = "RET"
    Diszo [M:POH0]POHNUM
    Diszo [M:POH0]ORDDAT
    Case num$([M:POH0]BETFCY)
        When "1" : Diszo [M:POH0]ZSCNLN : Diszo [M:POH0]ZSCNQY
        When "2" : Gosub SCAN_TO_ENTER
    Endcase

    If BOUT = "a" & !find(REP,"C","M","D")
        Actzo [M:POH0]ZSCNLN
        REP = "M"
    Endif
Endif
Return

# Disable the custom fields when opening an existing PO

$STYLE
Diszo [M:POH0]ZSCNLN
Diszo [M:POH0]ZSCNQY
Return

# This tag checks the status of the PO on screen if it is not a closed PO
# 1. If the PO is not in any modification mode, then enable the “Enable scan to enter” button Za
# 2. If the PO is in modification, creation or duplication mode, enable the field ZSCNLN

$SCAN_TO_ENTER
If [F:POH]CLEFLG = 1
    If !find(REP,"C","M","D")
        CHMEN += "Za"
    Else
        Actzo [M:POH0]ZSCNLN
    Endif
Endif
Return

# After modifying the supplier field during creation, we want to check if it is an intersite supplier,
# and activate / deactivate the fields. We also need a check to ensure the user cannot proceed with
# creation of the PO if the user is not in any modification mode – this is a bug related to hiding almost all fields

Subprog AM_BPSNUM(VALEUR)
Variable Char    VALEUR()
If GFLAG = "RET"
    If GREP = "C"
        If func AFNC.INTFLD("BPARTNER","BETFCY",VALEUR) = "2"
            Actzo [M:POH0]ZSCNLN
            Diszo [M:POH0]ZSCNQY
        Else
            Diszo [M:POH0]ZSCNLN
            Diszo [M:POH0]ZSCNQY
        Endif
    Else
        mkstat = 2
        GMESSAGE = 'Document does not exist.\Please click "NEW" first!'
    Endif
Endif
End

# After-modification action of the new product field ZSCNLN
# 1. Check if the product-site exists at the receiving site, if not, throw mkstat=2 and an infobox
# 2. If the product-site exists, activate the quantity entry field ZSCNQY, deactivate the product entry field ZSCNLN, and
# position the cursor in the ZSCNQY using zonsui.

Subprog AM_ZSCNLN(VALEUR)
Variable Char    VALEUR()
If func AFNC.INTFLD("ITMFACILIT","AUUID",VALEUR+"~"+[M:POH0]POHFCY) = ""
    GMESSAGE = VALEUR+" non-existent product site "+[M:POH0]POHFCY
    mkstat = 2
Else
    Actzo [M:POH0]ZSCNQY
    Diszo [M:POH0]ZSCNLN
    zonsui = "[M:POH0]ZSCNQY"
Endif
End

# Processing for the quantity entry field ZSCNQY
# 1. Limit code execution to quantities above 0
# 2a. Figure out whether the product already exists in the lines, if so, go to tag $APPEND_LINE,
# if not, go to tag $ENTER_NEWLINE
# 2b. Bugfix: Use for loop instead of find - find will only check the first instance of the product
# Here, we will also dynamically set the value of nolign, represented here by local integer NOL,
# setting it to either the existing product line, or by finding the current maximum of the grid to add a new line

Subprog AP_ZSCNQY(VALEUR)
Variable Decimal VALEUR
If VALEUR > 0
    Local Shortint NOL
    Local Integer LIN : [L]LIN = 0
    For I = 0 To [M:POH2]NBLIG-1
        If [M:POH2]ITMREF(I) = [M:POH0]ZSCNLN & [M:POH2]LINCLEFLG(I) = 1
            [L]NOL = I
            [L]LIN += 1
            Break
        Endif
    Next
    If [L]LIN > 0
        Goto APPEND_LINE
    Else
        [L]NOL = max([M:POH2]NBLIG)
        Goto ENTER_NEWLINE
    Endif
Endif
End

# We need some control of the quantity field to determine what happens when
# the user leaves it blank or enters a 0, as well as to prevent entry of a quantity
# over a specified amount in the event the user accidentally scans a UPC into the
# quantity field
# 1. If the value is 0 (blank or set to 0), as the user if they want to cancel entry
# of the scanned product – useful if they scan the wrong one. If so, go straight to tag AFFZO_MASK
# and reset the fields for use.
# 2. If the user does not wish to cancel entry, we will reset the quantity field, move the
# cursor into it and allow them entry again by setting mkstat=2
# 3. If the user enters a quantity above 1000, we will throw an error and reset the field
# for use like in point 2 above

Subprog C_ZSCNQY(VALEUR)
Variable Decimal VALEUR
If VALEUR = 0
    Local Integer YN : YN = 2
    Call OUINON("Quantity must be greater than 0\Cancel the entry?", YN) From GESECRAN
    If YN = 2
        Goto AFFZO_MASK
    Else
        Raz [M:POH0]ZSCNQY
        Affzo [M:POH0]ZSCNQY
        zonsui="[M:POH0]ZSCNQY"
        mkstat=2
    Endif
Endif
If VALEUR > 1000
    GMESSAGE = "Maximum quantity 1000"
    Raz [M:POH0]ZSCNQY
    Affzo [M:POH0]ZSCNQY
    zonsui="[M:POH0]ZSCNQY"
    mkstat=2
Endif
End

# The product does not exist in the grid, so we need to add it. There are several required fields which all
# need to be set appropriately for the update. The NOL value is passed through from AP_ZSCNQY along with the quantity to
# use, VALEUR. The item code is pulled from the product field ZSCNLN, and used to calculate some values from other tables.
# At the end, we will go to the $GET_POSITION tag, to calculate and set the correct value for the POH2 NBLIG mask update

$ENTER_NEWLINE
[M:POH2]ITMREF(NOL) = [M:POH0]ZSCNLN
[M:POH2]ITMDES(NOL) = func AFNC.INTFLD("ITMMASTER","ITMDES1",[M:POH0]ZSCNLN)
[M:POH2]ITMDES1(NOL) = func AFNC.INTFLD("ITMMASTER","ITMDES1",[M:POH0]ZSCNLN)
[M:POH2]PRHFCY(NOL) = [M:POH0]POHFCY
[M:POH2]FCYADD(NOL) = func AFNC.INTFLD("FACILITY","BPAADD",[M:POH0]POHFCY)
[M:POH2]LINSTOFCY(NOL) = func AFNC.INTFLD("BPARTNER","FCY",[M:POH0]BPSNUM)
[M:POH2]UOM(NOL) = func AFNC.INTFLD("ITMMASTER","STU",[M:POH0]ZSCNLN)
[M:POH2]QTYUOM(NOL) = VALEUR
[M:POH2]UOMPUUCOE(NOL) = VALEUR
[M:POH2]QTYSTU(NOL) = VALEUR
[M:POH2]EXTRCPDAT(NOL) = date$
[M:POH2]GROPRI = 0
[M:POH2]LINPURTYP = 1
[M:POH2]VAT1(NOL) = "NT"
[M:POH2]VAT2(NOL) = "NTX"
[M:POH2]VAT3(NOL) = ""
[M:POH2]QTYPUU(NOL) = 1
[M:POH2]PUU(NOL) = func AFNC.INTFLD("ITMMASTER","STU",[M:POH0]ZSCNLN)
[M:POH2]STU(NOL) = func AFNC.INTFLD("ITMMASTER","STU",[M:POH0]ZSCNLN)
[M:POH2]NETCUR(NOL) = "CAD"
[M:POH2]CPRCUR(NOL) = "CAD"
[M:POH2]LINWEU(NOL) = "KG"
[M:POH2]LINVOU(NOL) = "L"
[M:POH2]LINACC1(NOL) = "20200"
[M:POH2]LINCLEFLG(NOL) = 1
Goto GET_POSITION
End

# The product already exists, so we will update its quantity using value passed in from ZP_ZSCNQY
# After updating the quantity, we will go to the $GET_POSITION tag, which determines the position of the
# cursor and sets the POH2 NBLIG mask accordingly for update

$APPEND_LINE
[M:POH2]QTYUOM(NOL) += VALEUR
[M:POH2]QTYSTU(NOL) += VALEUR
[M:POH2]QTYPUU(NOL) += VALEUR
Goto GET_POSITION
End

# In this complex function, we need to determine the position of the cursor within the NBLIG mask, and update it
# if necessary in order to perform an AFFZO on the mask – updating the screen view with the newly added or updated
# fields.
# 1. If the maximum value of NBLIG = 0, no lines have been added, so we set it to 1 and proceed with the update – the first
# line will be added.
# 2. If the maximum value of NBLIG is greater than our NOL pointer, we just updated an existing line and only need to
# refresh the grid instead of updating the NBLIG number.
# 3. If those two conditions fail, it means we’ve just added a new line to the end of the grid, and need to update the
# screen by setting NBLIG to its maximum value, plus 1
# NB: All 3 of these conditions end in going to the $AFFZO_MASK tag

$GET_POSITION
If max([M:POH2]NBLIG) = 0
    [M:POH2]NBLIG = 1
    Goto AFFZO_MASK
Else
    If max([M:POH2]NBLIG) > [L]NOL
        Goto AFFZO_MASK
    Else
        [M:POH2]NBLIG = max([M:POH2]NBLIG)+1
        Goto AFFZO_MASK
    Endif
Endif
End

# This function will simply be used to refresh the screen grid with the new values, and reset the scan to enter function
# by clearing and disabling the quantity field, clearing and enabling the product field, and returning the cursor to the
# product field using zonsui for the next scan. If the user does not need to scan any more, they can simply exit the scan
# to enter field by hitting tab – the cursor will move to the internal reference field for them to entre if required.

$AFFZO_MASK
Affzo [POH2]1-900
Raz [M:POH0]ZSCNLN
Raz [M:POH0]ZSCNQY
Affzo [M:POH0]ZSCNLN
Affzo [M:POH0]ZSCNQY
Diszo [M:POH0]ZSCNQY
Actzo [M:POH0]ZSCNLN
zonsui="[M:POH0]ZSCNLN"
End